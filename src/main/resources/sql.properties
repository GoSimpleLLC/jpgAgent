#
# Copyright (c) 2016, Adam Brusselback
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the Software), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED AS IS, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

# Database listen channel
sql.database.listen=LISTEN jpgagent_kill_job;

# Dummy sql for getting results from async listen/notify
sql.jpgagent.dummy=SELECT 1;

# Cleanup sql for aborted jobs
sql.jpgagent.cleanup =\
CREATE TEMP TABLE pga_tmp_zombies(jagpid INTEGER); \
INSERT INTO pga_tmp_zombies (jagpid) \
SELECT jagpid \
FROM pgagent.pga_jobagent AG \
LEFT JOIN pg_stat_activity PA ON jagpid=pid \
WHERE pid IS NULL; \
UPDATE pgagent.pga_joblog SET jlgstatus='d' WHERE jlgid IN ( \
SELECT jlgid \
FROM pga_tmp_zombies z \
INNER JOIN pgagent.pga_job j \
ON z.jagpid=j.jobagentid \
INNER JOIN pgagent.pga_joblog l \
ON j.jobid = l.jlgjobid \
WHERE l.jlgstatus='r'); \
UPDATE pgagent.pga_jobsteplog SET jslstatus='d' WHERE jslid IN ( \
SELECT jslid \
FROM pga_tmp_zombies z \
INNER JOIN pgagent.pga_job j \
ON z.jagpid=j.jobagentid \
INNER JOIN pgagent.pga_joblog l \
ON j.jobid = l.jlgjobid \
INNER JOIN pgagent.pga_jobsteplog s \
ON l.jlgid = s.jsljlgid \
WHERE s.jslstatus='r'); \
UPDATE pgagent.pga_jobsteplog SET jslstatus='d' \
WHERE jslid IN ( \
SELECT jslid \
FROM pgagent.pga_joblog l \
INNER JOIN pgagent.pga_jobsteplog s \
ON l.jlgid = s.jsljlgid \
WHERE TRUE \
AND l.jlgstatus <> 'r' \
AND s.jslstatus = 'r'); \
UPDATE pgagent.pga_job SET jobagentid=NULL, jobnextrun=NULL \
WHERE jobagentid IN (SELECT jagpid FROM pga_tmp_zombies); \
DELETE FROM pgagent.pga_jobagent \
WHERE jagpid IN (SELECT jagpid FROM pga_tmp_zombies); \
DROP TABLE pga_tmp_zombies;

#
sql.jpgagent.register_agent =\
INSERT INTO pgagent.pga_jobagent (jagpid, jagstation) \
SELECT ?, ? \
WHERE NOT EXISTS ( \
SELECT 1 \
FROM pgagent.pga_jobagent \
WHERE jagpid = ? \
AND jagstation = ?);

#
sql.jpgagent.get_job =\
UPDATE pgagent.pga_job \
SET jobagentid=?, joblastrun=now() \
WHERE jobenabled \
AND jobagentid IS NULL \
AND jobnextrun <= now() \
AND (jobhostagent = '' OR jobhostagent = ?) \
RETURNING jobid, jobname, jobdesc;

#
sql.job.clear_job_agent=\
UPDATE pgagent.pga_job SET jobagentid=NULL, jobnextrun=NULL \
WHERE jobid = ?;

#
sql.joblog.start_log=\
INSERT INTO pgagent.pga_joblog(jlgjobid, jlgstatus) \
VALUES (?, ?) \
RETURNING jlgid;

#
sql.joblog.finish_log=\
UPDATE pgagent.pga_joblog SET jlgstatus = ?, jlgduration=now() - jlgstart \
WHERE jlgid = ?;

#
sql.jobstepbuilder.build_step=\
SELECT jstid \
 , jstjobid \
 , jstname \
 , jstdesc \
 , jstkind \
 , jstcode \
 , jstconnstr \
 , jstdbname \
 , jstonerror \
 FROM pgagent.pga_jobstep \
 WHERE jstenabled \
 AND jstjobid=? \
 ORDER BY jstname, jstid;

#
sql.jobsteplog.start_log=\
INSERT INTO pgagent.pga_jobsteplog(jsljlgid, jsljstid, jslstatus) \
SELECT ?, ?, ? \
RETURNING jslid;

#
sql.jobsteplog.finish_log=\
UPDATE pgagent.pga_jobsteplog \
SET jslduration = now() - jslstart, \
jslstatus = ?, \
jslresult = ?, \
jsloutput = ? \
WHERE jslid=?;